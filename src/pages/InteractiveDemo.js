import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState } from 'react';
import NavigationBar from '@/components/NavigationBar';
import { InvoiceSimulator } from '@/components/demo/InvoiceSimulator';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { demoLoader, validateDemoAddresses, formatSatoshis } from '@/lib/demoLoader';
import { Sparkles, Database, Activity, Shield, TrendingUp, Users, FileText, CheckCircle, AlertTriangle, } from 'lucide-react';
import { parseInvoiceOptimized } from '@/lib/cache';
import { useToast } from '@/hooks/use-toast';
const InteractiveDemo = () => {
    const { toast } = useToast();
    const [selectedInvoice, setSelectedInvoice] = useState(null);
    const [simulatedEvents, setSimulatedEvents] = useState([]);
    const [aiTestResults, setAiTestResults] = useState(null);
    const [testing, setTesting] = useState(false);
    const stats = demoLoader.getInvoiceStats();
    const milestoneStats = demoLoader.getMilestoneStats();
    const validation = validateDemoAddresses();
    const testAIParsing = async (testCase) => {
        setTesting(true);
        try {
            const result = await parseInvoiceOptimized(testCase.text);
            setAiTestResults({
                testId: testCase.id,
                description: testCase.description,
                extracted: result,
                expected: testCase.expected_extraction,
                success: true,
            });
            toast({
                title: '🤖 AI Parsing Complete',
                description: `Confidence: ${Math.round((result.confidence_score || 0) * 100)}%`,
            });
        }
        catch (error) {
            setAiTestResults({
                testId: testCase.id,
                error: error,
                success: false,
            });
            toast({
                title: '❌ Parsing Failed',
                description: 'AI parsing encountered an error',
                variant: 'destructive',
            });
        }
        finally {
            setTesting(false);
        }
    };
    return (_jsxs("div", { className: "min-h-screen bg-background", children: [_jsx(NavigationBar, {}), _jsxs("div", { className: "container mx-auto px-4 py-8", children: [_jsxs("div", { className: "mb-8", children: [_jsx("h1", { className: "text-4xl font-bold mb-4", children: "\uD83C\uDFAE Interactive Demo Playground" }), _jsx("p", { className: "text-muted-foreground text-lg mb-6", children: "Explore BitMind's full capabilities with production-grade demo data and interactive simulations" }), _jsxs("div", { className: "grid md:grid-cols-5 gap-4", children: [_jsx(Card, { children: _jsx(CardContent, { className: "pt-6", children: _jsxs("div", { className: "text-center", children: [_jsx(FileText, { className: "w-8 h-8 mx-auto mb-2 text-blue-600" }), _jsx("p", { className: "text-2xl font-bold", children: stats.total }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Demo Invoices" })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "pt-6", children: _jsxs("div", { className: "text-center", children: [_jsx(Activity, { className: "w-8 h-8 mx-auto mb-2 text-green-600" }), _jsx("p", { className: "text-2xl font-bold", children: stats.active }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Active" })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "pt-6", children: _jsxs("div", { className: "text-center", children: [_jsx(AlertTriangle, { className: "w-8 h-8 mx-auto mb-2 text-red-600" }), _jsx("p", { className: "text-2xl font-bold", children: stats.disputed }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Disputed" })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "pt-6", children: _jsxs("div", { className: "text-center", children: [_jsx(TrendingUp, { className: "w-8 h-8 mx-auto mb-2 text-purple-600" }), _jsx("p", { className: "text-2xl font-bold", children: formatSatoshis(stats.totalValue) }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Total Value" })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "pt-6", children: _jsxs("div", { className: "text-center", children: [_jsx(Sparkles, { className: "w-8 h-8 mx-auto mb-2 text-orange-600" }), _jsxs("p", { className: "text-2xl font-bold", children: [Math.round(stats.averageConfidence * 100), "%"] }), _jsx("p", { className: "text-sm text-muted-foreground", children: "AI Confidence" })] }) }) })] })] }), _jsxs(Tabs, { defaultValue: "simulator", className: "space-y-6", children: [_jsxs(TabsList, { className: "grid w-full grid-cols-4", children: [_jsx(TabsTrigger, { value: "simulator", children: "Invoice Simulator" }), _jsx(TabsTrigger, { value: "ai", children: "AI Testing" }), _jsx(TabsTrigger, { value: "security", children: "Security" }), _jsx(TabsTrigger, { value: "governance", children: "Governance" })] }), _jsxs(TabsContent, { value: "simulator", className: "space-y-6", children: [_jsx(InvoiceSimulator, { onInvoiceSelect: setSelectedInvoice, onEventSimulate: (event) => setSimulatedEvents((prev) => [event, ...prev]) }), simulatedEvents.length > 0 && (_jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "Simulated Events Log" }), _jsx(CardDescription, { children: "Events you've simulated in this session" })] }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-2", children: simulatedEvents.slice(0, 10).map((event) => (_jsx("div", { className: "p-3 bg-secondary rounded-lg", children: _jsxs("div", { className: "flex justify-between items-start", children: [_jsxs("div", { children: [_jsx("p", { className: "font-semibold text-sm", children: event.event_type.replace('_', ' ').toUpperCase() }), _jsxs("p", { className: "text-xs text-muted-foreground", children: ["Invoice: ", event.invoice_id] })] }), _jsx(Badge, { variant: "outline", children: new Date(event.timestamp).toLocaleTimeString() })] }) }, event.event_id))) }) })] }))] }), _jsx(TabsContent, { value: "ai", className: "space-y-6", children: _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Sparkles, { className: "w-6 h-6" }), "AI Invoice Parsing Test Cases"] }), _jsx(CardDescription, { children: "Test AI parsing with different invoice formats and complexity levels" })] }), _jsxs(CardContent, { children: [_jsx("div", { className: "space-y-4", children: demoLoader.getAITestCases().map((testCase) => (_jsxs("div", { className: "p-4 border rounded-lg", children: [_jsxs("div", { className: "flex justify-between items-start mb-3", children: [_jsxs("div", { children: [_jsx("h4", { className: "font-semibold", children: testCase.id.replace('_', ' ').toUpperCase() }), _jsx("p", { className: "text-sm text-muted-foreground", children: testCase.description })] }), _jsxs(Button, { size: "sm", onClick: () => testAIParsing(testCase), disabled: testing, children: [_jsx(Sparkles, { className: "w-4 h-4 mr-2" }), "Test Parse"] })] }), _jsxs("div", { className: "bg-secondary p-3 rounded text-sm font-mono whitespace-pre-wrap", children: [testCase.text.substring(0, 200), "..."] })] }, testCase.id))) }), aiTestResults && (_jsxs("div", { className: `mt-4 p-4 rounded-lg ${aiTestResults.success ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'} border`, children: [_jsx("h4", { className: "font-semibold mb-2", children: aiTestResults.success ? '✅ Parsing Successful' : '❌ Parsing Failed' }), _jsxs("div", { className: "text-sm space-y-1", children: [_jsxs("p", { children: ["Test: ", aiTestResults.description] }), aiTestResults.success && (_jsxs(_Fragment, { children: [_jsxs("p", { children: ["Confidence: ", Math.round((aiTestResults.extracted?.confidence_score || 0) * 100), "%"] }), _jsxs("p", { children: ["Extracted Fields: ", Object.keys(aiTestResults.extracted || {}).length] })] }))] })] }))] })] }) }), _jsx(TabsContent, { value: "security", className: "space-y-6", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Shield, { className: "w-6 h-6" }), "Security & Risk Assessment"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: `p-4 rounded-lg ${validation.valid ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'} border`, children: [_jsxs("div", { className: "flex items-center gap-2 mb-2", children: [validation.valid ? (_jsx(CheckCircle, { className: "w-5 h-5 text-green-600" })) : (_jsx(AlertTriangle, { className: "w-5 h-5 text-red-600" })), _jsxs("h4", { className: "font-semibold", children: ["Address Validation: ", validation.valid ? 'All Valid' : 'Issues Found'] })] }), validation.errors.length > 0 && (_jsx("ul", { className: "text-sm space-y-1", children: validation.errors.map((error, i) => (_jsxs("li", { className: "text-red-700", children: ["\u2022 ", error] }, i))) }))] }), _jsxs("div", { children: [_jsx("h4", { className: "font-semibold mb-3", children: "Screened Entities" }), _jsx("div", { className: "space-y-2", children: demoLoader.data.security_data.screened_entities.map((entity) => (_jsxs("div", { className: "p-3 border rounded-lg", children: [_jsxs("div", { className: "flex justify-between items-start mb-2", children: [_jsx("code", { className: "text-xs", children: entity.address }), _jsx(Badge, { variant: entity.trust_level === 'high'
                                                                                        ? 'default'
                                                                                        : entity.trust_level === 'medium'
                                                                                            ? 'secondary'
                                                                                            : 'destructive', children: entity.trust_level })] }), _jsxs("div", { className: "grid grid-cols-3 gap-2 text-xs", children: [_jsxs("div", { children: [_jsx("p", { className: "text-muted-foreground", children: "Risk Score" }), _jsxs("p", { className: "font-semibold", children: [entity.risk_score, "/10"] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-muted-foreground", children: "Completed" }), _jsx("p", { className: "font-semibold", children: entity.completed_invoices })] }), _jsxs("div", { children: [_jsx("p", { className: "text-muted-foreground", children: "Dispute Rate" }), _jsxs("p", { className: "font-semibold", children: [(entity.dispute_rate * 100).toFixed(1), "%"] })] })] })] }, entity.address))) })] }), _jsxs("div", { children: [_jsxs("h4", { className: "font-semibold mb-3 flex items-center gap-2", children: [_jsx(AlertTriangle, { className: "w-5 h-5 text-red-600" }), "Blacklisted Addresses"] }), _jsx("div", { className: "space-y-2", children: demoLoader.data.security_data.blacklisted_addresses.map((address) => (_jsx("div", { className: "p-2 bg-red-50 border border-red-200 rounded", children: _jsx("code", { className: "text-xs text-red-800", children: address }) }, address))) })] })] }) })] }) }), _jsxs(TabsContent, { value: "governance", className: "space-y-6", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Users, { className: "w-6 h-6" }), "DAO Governance & Batch Approvals"] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: demoLoader.getBatchApprovals().map((batch) => (_jsxs("div", { className: "p-4 border-2 border-blue-200 rounded-lg", children: [_jsxs("div", { className: "flex justify-between items-start mb-3", children: [_jsxs("div", { children: [_jsx("h4", { className: "font-semibold", children: batch.batch_id }), _jsx("p", { className: "text-sm text-muted-foreground", children: batch.description })] }), _jsx(Badge, { variant: "default", className: "bg-green-600", children: batch.status })] }), _jsxs("div", { className: "grid md:grid-cols-2 gap-4 mb-4", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Total Amount" }), _jsx("p", { className: "font-semibold", children: formatSatoshis(batch.total_amount) })] }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Approval Threshold" }), _jsxs("p", { className: "font-semibold", children: [batch.approvals.filter((a) => a.approved).length, " / ", batch.approval_threshold] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("h5", { className: "font-semibold text-sm", children: "Approvals:" }), batch.approvals.map((approval, i) => (_jsxs("div", { className: `p-2 rounded text-sm ${approval.approved ? 'bg-green-50' : 'bg-orange-50'}`, children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsxs("code", { className: "text-xs", children: [approval.org.substring(0, 20), "..."] }), _jsx(Badge, { variant: approval.approved ? 'default' : 'outline', children: approval.approved ? '✅ Approved' : '⏳ Pending' })] }), approval.reason && (_jsx("p", { className: "text-xs text-muted-foreground mt-1", children: approval.reason }))] }, i)))] }), _jsx("div", { className: "mt-3 pt-3 border-t", children: _jsxs("p", { className: "text-xs text-muted-foreground", children: ["Executed: ", new Date(batch.executed_at).toLocaleString()] }) })] }, batch.batch_id))) }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Milestone Performance" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "grid md:grid-cols-3 gap-4", children: [_jsxs("div", { className: "p-4 bg-green-50 rounded-lg", children: [_jsx("p", { className: "text-sm text-muted-foreground mb-1", children: "Completed" }), _jsx("p", { className: "text-2xl font-bold text-green-600", children: milestoneStats.completed }), _jsxs("p", { className: "text-xs text-muted-foreground", children: [Math.round((milestoneStats.completed / milestoneStats.total) * 100), "% completion rate"] })] }), _jsxs("div", { className: "p-4 bg-blue-50 rounded-lg", children: [_jsx("p", { className: "text-sm text-muted-foreground mb-1", children: "In Progress" }), _jsx("p", { className: "text-2xl font-bold text-blue-600", children: milestoneStats.in_progress }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Currently active" })] }), _jsxs("div", { className: "p-4 bg-orange-50 rounded-lg", children: [_jsx("p", { className: "text-sm text-muted-foreground mb-1", children: "Pending" }), _jsx("p", { className: "text-2xl font-bold text-orange-600", children: milestoneStats.pending }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Awaiting start" })] })] }) })] })] })] }), _jsxs(Card, { className: "mt-8 bg-gradient-to-r from-purple-50 to-blue-50", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Database, { className: "w-6 h-6" }), "Demo Data Information"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "grid md:grid-cols-3 gap-4", children: [_jsxs("div", { children: [_jsx("h4", { className: "font-semibold mb-2", children: "\uD83D\uDCCA Data Version" }), _jsxs("p", { className: "text-sm text-muted-foreground", children: ["v", demoLoader.data.version] }), _jsxs("p", { className: "text-xs text-muted-foreground", children: ["Updated: ", demoLoader.data.last_updated] })] }), _jsxs("div", { children: [_jsx("h4", { className: "font-semibold mb-2", children: "\uD83D\uDD0D Test Cases" }), _jsxs("p", { className: "text-sm text-muted-foreground", children: [demoLoader.getAITestCases().length, " AI parsing scenarios"] }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Standard, minimal, and complex formats" })] }), _jsxs("div", { children: [_jsx("h4", { className: "font-semibold mb-2", children: "\uD83C\uDFDB\uFE0F Demo Wallets" }), _jsxs("p", { className: "text-sm text-muted-foreground", children: [demoLoader.getDemoWallets().length, " configured wallets"] }), _jsx("p", { className: "text-xs text-muted-foreground", children: "Payer, Payee, and Arbiter roles" })] })] }) })] })] })] }));
};
export default InteractiveDemo;
